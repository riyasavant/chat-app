#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
const socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIO(server);

let users = [];

const addUser = (userId, socketId) => {
  !users.some(user => user.userId === userId) && users.push({ userId, socketId });
}

const removeUser = (socketId) => {
  users = users.filter(user => user.socketId !== socketId);
}

const getUser = (userId) => {
  const fetchedUser = users.filter(user => user.userId === userId);
  return fetchedUser[0];
}

io.on("connection", (socket) => {

  // connection
  console.log("A user connected");
  
  socket.on("addUser", userId => {
      addUser(userId, socket.id);
      console.log(users);
      io.emit("getUsers", users);
  });

  // send and get messages
  socket.on("sendMessage", ({ senderId, receiverId, text, conversationId }) => {
      const user = getUser(receiverId);
      io.to(user.socketId).emit("getMessage", {
          senderId,
          text,
          conversationId
      })
  })

  // disconnection
  socket.on("disconnect", () => {
      console.log("A user disconnected");
      removeUser(socket.id);
      io.emit("getUsers", users);
  })
});
server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}